    <script>
    function xData() {
        return {
            cancelOrder: async function(ev) {
                      const jsonData = {
                  status: 'Cancelled'
              };
                try {
                    const response = await fetch('/order/'+location.pathname.split('/')[2], {
                        method: 'PUT',
                        headers: {
                          'Content-Type': 'application/json',
                      },
                          body: JSON.stringify(jsonData),
                    });
          
                    if (response.ok) { 
                        alert('Order Cancelled!');
                        this.fetchOrder();
                    } else {
                      alert('Error Canceling order. Please try again.');
                    }
                } catch (error) {
                  alert('An unexpected error occurred:', error);
                }
                },
            sendForm: async function(ev) {
                      const jsonData = {
                  orderName: ev?.target?.orderName?.value,
                  description: ev?.target?.description?.value,
                  price: ev?.target?.price?.value,
                  status: ev?.target?.status?.value
              };
                try {
                    const response = await fetch('/order/'+location.pathname.split('/')[2], {
                        method: 'PUT',
                        headers: {
                          'Content-Type': 'application/json',
                      },
                          body: JSON.stringify(jsonData),
                    });
          
                    if (response.ok) { 
                        alert('Order updated successfully!');
                        this.fetchOrder();
                    } else {
                      alert('Error submitting order. Please try again.');
                    }
                } catch (error) {
                  alert('An unexpected error occurred:', error);
                }
                },
            order: [],
            fetchOrder: async function () {
                try {
                    
                    const response = await fetch('/order/'+location.pathname.split('/')[2]);
                    const data = await response.json();
                    this.order = data.order;
                    if(!data.order)
                    throw new Error('order not exist');
                } catch (error) {
                    console.error('Error fetching order:', error);
                    alert('order not exist');
                    location.href = '/';
                }
            },
        };
    }



    </script>
    <div x-data="xData()" class="single" x-init="fetchOrder">
        <a href="/">back</a>
        <h2>Order Details</h2>
        <table>
            <tr>
                <th>Order</th>
                <th>Description</th>
                <th>Price</th>
                <th>Created At</th>
                <th>Status</th>
            </tr>
            <tr>
                <td x-text="order.title"></td>
                <td x-text="order.description"></td>
                <td x-text="order.price"></td>
                <td x-text="order.createdAt"></td>
                <td x-text="order.status"></td>
            </tr>
        </table>
        <section class="create" style="padding: 12px;">
            <template x-if="order?.status=='Cancelled'">
                <label>Cancelled</label>
            </template>
            <template x-if="order?.status!='Cancelled'">
                
            <form @submit.prevent="sendForm">
              <h2>Update Order</h2>
          
              <label for="orderName">Order Name:</label>
              <input type="text" id="orderName" name="orderName" :value="order.title" required/>
          
              <label for="description">Description:</label>
              <textarea id="description" name="description" :value="order.description" rows="4" ></textarea>
          
              <label for="price">Price:</label>
              <input type="number" id="price" name="price" :value="order.price" />
              <div style="display: flex; justify-content: space-between;">
                  <label for="status">Edit Status:</label>
                  <select id="status" name="status" :value="order.status">
                      <option :disabled="order.status!='Pending'" value="Pending">Pending</option>
                      <option :disabled="!['Pending','Processing'].includes(order.status)" value="Processing">Processing</option>
                      <option :disabled="['Delivered'].includes(order.status)" value="Shipped">Shipped</option>
                      <option :disabled="order.status=='Delivered'" value="Delivered">Delivered</option>
                    </select>
                </div>
              <br>  
              <button type="submit">Submit Order</button>
              <button @click="cancelOrder" type="button" style="margin-left: 50px; background-color: chocolate;">Cancel</button>
            </form>
            </template>
          </section>
        
    </div>